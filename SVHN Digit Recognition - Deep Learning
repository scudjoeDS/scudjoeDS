{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/scudjoeDS/scudjoeDS/blob/main/SVHN%20Digit%20Recognition%20-%20Deep%20Learning\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zsVNnC2OicBK",
        "outputId": "0ee74261-62a5-404f-acac-b4e0becaa500"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "R9vytFVTjVCu"
      },
      "outputs": [],
      "source": [
        "#importing necessary libraries\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, Activation, BatchNormalization\n",
        "from tensorflow.keras.utils import to_categorical"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nbH4EPMJjZlX",
        "outputId": "dfad796c-ac36-4efb-f6c0-01d63e656ad9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.12.0\n"
          ]
        }
      ],
      "source": [
        "print(tf.__version__)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "Bas_5ISokdWZ"
      },
      "outputs": [],
      "source": [
        "# Loading the dataset\n",
        "\n",
        "import h5py\n",
        "\n",
        "h5f = h5py.File('/content/drive/MyDrive/MIT-ADSP/SVHN_single_grey1.h5', 'r')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "XudZmILtktLi"
      },
      "outputs": [],
      "source": [
        "# Load the training and the test dataset\n",
        "\n",
        "X_train = h5f['X_train'][:]\n",
        "\n",
        "y_train = h5f['y_train'][:]\n",
        "\n",
        "X_test = h5f['X_test'][:]\n",
        "\n",
        "y_test = h5f['y_test'][:]\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "OcWmo476mU6C"
      },
      "outputs": [],
      "source": [
        "# Close this file\n",
        "\n",
        "h5f.close()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ooLtt39mh2E",
        "outputId": "852c0fb7-528f-4e91-d4d2-5918fe2bd8a7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(42000, 18000)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "# Checking the number of images in the training and testing dataset\n",
        "len(X_train), len(X_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p3PPAULTm-0P"
      },
      "source": [
        "There are 42,000 images in the training data and 18,000 images in the testing data.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 120
        },
        "id": "uOKcWGKTnK76",
        "outputId": "adbbaaf2-fa4c-4ef0-d87c-667001350052"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x100 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "label for each of the above image: [2 6 7 4 4 0 3 0 7 3]\n"
          ]
        }
      ],
      "source": [
        "# Visualizing the first 10 images in the dataset and printing their labels\n",
        "\n",
        "plt.figure(figsize = (10, 1))\n",
        "\n",
        "for i in range(10):\n",
        "\n",
        "    plt.subplot(1, 10, i+1)\n",
        "\n",
        "    plt.imshow(X_train[i], cmap = \"gray\")\n",
        "\n",
        "    plt.axis('off')\n",
        "\n",
        "plt.show()\n",
        "\n",
        "print('label for each of the above image: %s' % (y_train[0:10]))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jldJEuvfoDbd"
      },
      "source": [
        "Data Preparation:\n",
        "\n",
        "\n",
        "*  Print the shape and the array of pixels for the first image in the training dataset.\n",
        "*   Normalize the train and the test dataset by dividing by 255.\n",
        "*   Print the new shapes of the train and the test dataset.\n",
        "*   One-hot encode the target variable\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6IGLXnrxna9E",
        "outputId": "7070dd13-7546-4f27-84f6-5e944736c428"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape: (32, 32)\n",
            "\n",
            "First image:\n",
            " [[ 33.0704  30.2601  26.852  ...  71.4471  58.2204  42.9939]\n",
            " [ 25.2283  25.5533  29.9765 ... 113.0209 103.3639  84.2949]\n",
            " [ 26.2775  22.6137  40.4763 ... 113.3028 121.775  115.4228]\n",
            " ...\n",
            " [ 28.5502  36.212   45.0801 ...  24.1359  25.0927  26.0603]\n",
            " [ 38.4352  26.4733  23.2717 ...  28.1094  29.4683  30.0661]\n",
            " [ 50.2984  26.0773  24.0389 ...  49.6682  50.853   53.0377]]\n"
          ]
        }
      ],
      "source": [
        "# Shape and the array of pixels for the first image\n",
        "\n",
        "print(\"Shape:\", X_train[0].shape)\n",
        "\n",
        "print()\n",
        "\n",
        "print(\"First image:\\n\", X_train[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "JsShIH6toqG5"
      },
      "outputs": [],
      "source": [
        "# Reshaping the dataset to flatten them. We are reshaping the 2D image into 1D array\n",
        "\n",
        "X_train = X_train.reshape(X_train.shape[0], 1024)\n",
        "\n",
        "X_test = X_test.reshape(X_test.shape[0], 1024)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "fNwOgcfBo1pN"
      },
      "outputs": [],
      "source": [
        "# Normalize inputs from 0-255 to 0-1\n",
        "\n",
        "X_train = X_train/255\n",
        "X_test = X_test/255"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SHg6apGeo9gq",
        "outputId": "861a4fdb-84d8-413d-c926-9663504a55e5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set: (42000, 1024) (42000,)\n",
            "Test set: (18000, 1024) (18000,)\n"
          ]
        }
      ],
      "source": [
        "# New shape\n",
        "\n",
        "print('Training set:', X_train.shape, y_train.shape)\n",
        "\n",
        "print('Test set:', X_test.shape, y_test.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kDNdWglxpLct",
        "outputId": "1bb75226-8974-471e-b65d-62f690cfd707"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0., 1., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 0., ..., 1., 0., 0.],\n",
              "       [0., 0., 1., ..., 0., 0., 0.],\n",
              "       ...,\n",
              "       [0., 0., 0., ..., 1., 0., 0.],\n",
              "       [0., 0., 0., ..., 0., 0., 1.],\n",
              "       [0., 0., 1., ..., 0., 0., 0.]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "# One-hot encode output\n",
        "\n",
        "y_train = to_categorical(y_train)\n",
        "\n",
        "y_test = to_categorical(y_test)\n",
        "\n",
        "# Test labels\n",
        "\n",
        "y_test"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v2a1mpgXpVF7"
      },
      "source": [
        "Each entry of the target variable is a one-hot encoded vector instead of a single label."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7XVzxNlIpflN"
      },
      "source": [
        "**Model Building**\n",
        "\n",
        "With data preprocessing done, next step is to build an ANN model.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "VCnx9WWWpMYT"
      },
      "outputs": [],
      "source": [
        "# Fixing the seed for random number generators\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "import random\n",
        "\n",
        "random.seed(42)\n",
        "\n",
        "tf.random.set_seed(42)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HeTPrxQYp7TQ"
      },
      "source": [
        "**Model Architecture**\n",
        "\n",
        "    Write a function that returns a sequential model with the following architecture:\n",
        "        First hidden layer with 64 nodes and the relu activation and the input shape = (1024, )\n",
        "        Second hidden layer with 32 nodes and the relu activation\n",
        "        Output layer with activation as 'softmax' and number of nodes equal to the number of classes, i.e., 10\n",
        "        Compile the model with the loss equal to categorical_crossentropy, optimizer equal to Adam(learning_rate = 0.001), and metric equal to 'accuracy'. Do not fit the model here, just return the compiled model.\n",
        "    Call the nn_model_1 function and store the model in a new variable.\n",
        "    Print the summary of the model.\n",
        "    Fit on the train data with a validation split of 0.2, batch size = 128, verbose = 1, and epochs = 20. Store the model building history to use later for visualization.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "U9qq-SGAr6pj"
      },
      "outputs": [],
      "source": [
        "#Importing losses and optimizers modules\n",
        "from tensorflow.keras import losses\n",
        "from tensorflow.keras import optimizers\n",
        "\n",
        "# Define the model\n",
        "\n",
        "def nn_model_1():\n",
        "\n",
        "    model = Sequential()\n",
        "\n",
        "    # Add layers as per the architecture mentioned above in the same sequence\n",
        "\n",
        "    model.add(Dense(64, input_dim=1024, activation='relu'))\n",
        "\n",
        "    model.add(Dense(32, activation='relu'))\n",
        "\n",
        "    model.add(Dense(10, activation='softmax'))\n",
        "\n",
        "     #declare adam optimizer with learning rate of 0.001\n",
        "    adam = optimizers.Adam(learning_rate=0.001)\n",
        "\n",
        "    # Compile the model\n",
        "\n",
        "    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "\n",
        "    return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "RZc8Kx-Axn2b"
      },
      "outputs": [],
      "source": [
        "# Build the model\n",
        "\n",
        "model_1 = nn_model_1()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5lR2gBa_x5kL",
        "outputId": "97f16b4b-a483-4c71-9e21-d585154ee11d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense (Dense)               (None, 64)                65600     \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 32)                2080      \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 10)                330       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 68,010\n",
            "Trainable params: 68,010\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "# Print the summary\n",
        "\n",
        "model_1.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LzBQeyXbyrYw",
        "outputId": "f10f5a3a-f93f-4740-a17e-dcda46050261"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "263/263 [==============================] - 2s 5ms/step - loss: 2.2934 - accuracy: 0.1233 - val_loss: 2.2324 - val_accuracy: 0.1744\n",
            "Epoch 2/20\n",
            "263/263 [==============================] - 1s 5ms/step - loss: 2.0774 - accuracy: 0.2509 - val_loss: 1.9318 - val_accuracy: 0.3089\n",
            "Epoch 3/20\n",
            "263/263 [==============================] - 2s 6ms/step - loss: 1.8679 - accuracy: 0.3405 - val_loss: 1.7779 - val_accuracy: 0.3869\n",
            "Epoch 4/20\n",
            "263/263 [==============================] - 2s 6ms/step - loss: 1.6573 - accuracy: 0.4391 - val_loss: 1.5288 - val_accuracy: 0.4907\n",
            "Epoch 5/20\n",
            "263/263 [==============================] - 1s 4ms/step - loss: 1.4635 - accuracy: 0.5180 - val_loss: 1.4202 - val_accuracy: 0.5255\n",
            "Epoch 6/20\n",
            "263/263 [==============================] - 1s 4ms/step - loss: 1.3588 - accuracy: 0.5568 - val_loss: 1.3240 - val_accuracy: 0.5768\n",
            "Epoch 7/20\n",
            "263/263 [==============================] - 1s 4ms/step - loss: 1.2895 - accuracy: 0.5839 - val_loss: 1.2558 - val_accuracy: 0.6013\n",
            "Epoch 8/20\n",
            "263/263 [==============================] - 1s 4ms/step - loss: 1.2375 - accuracy: 0.6044 - val_loss: 1.2217 - val_accuracy: 0.6221\n",
            "Epoch 9/20\n",
            "263/263 [==============================] - 1s 4ms/step - loss: 1.1990 - accuracy: 0.6206 - val_loss: 1.1674 - val_accuracy: 0.6330\n",
            "Epoch 10/20\n",
            "263/263 [==============================] - 1s 4ms/step - loss: 1.1666 - accuracy: 0.6334 - val_loss: 1.1484 - val_accuracy: 0.6420\n",
            "Epoch 11/20\n",
            "263/263 [==============================] - 1s 4ms/step - loss: 1.1465 - accuracy: 0.6399 - val_loss: 1.1256 - val_accuracy: 0.6462\n",
            "Epoch 12/20\n",
            "263/263 [==============================] - 1s 4ms/step - loss: 1.1239 - accuracy: 0.6485 - val_loss: 1.1110 - val_accuracy: 0.6533\n",
            "Epoch 13/20\n",
            "263/263 [==============================] - 1s 4ms/step - loss: 1.1017 - accuracy: 0.6589 - val_loss: 1.0951 - val_accuracy: 0.6612\n",
            "Epoch 14/20\n",
            "263/263 [==============================] - 1s 4ms/step - loss: 1.0981 - accuracy: 0.6596 - val_loss: 1.0940 - val_accuracy: 0.6620\n",
            "Epoch 15/20\n",
            "263/263 [==============================] - 1s 5ms/step - loss: 1.0854 - accuracy: 0.6636 - val_loss: 1.0948 - val_accuracy: 0.6650\n",
            "Epoch 16/20\n",
            "263/263 [==============================] - 2s 6ms/step - loss: 1.0715 - accuracy: 0.6682 - val_loss: 1.1295 - val_accuracy: 0.6475\n",
            "Epoch 17/20\n",
            "263/263 [==============================] - 1s 6ms/step - loss: 1.0626 - accuracy: 0.6713 - val_loss: 1.0618 - val_accuracy: 0.6744\n",
            "Epoch 18/20\n",
            "263/263 [==============================] - 1s 4ms/step - loss: 1.0535 - accuracy: 0.6746 - val_loss: 1.0626 - val_accuracy: 0.6702\n",
            "Epoch 19/20\n",
            "263/263 [==============================] - 1s 4ms/step - loss: 1.0486 - accuracy: 0.6745 - val_loss: 1.0610 - val_accuracy: 0.6736\n",
            "Epoch 20/20\n",
            "263/263 [==============================] - 1s 4ms/step - loss: 1.0420 - accuracy: 0.6770 - val_loss: 1.0535 - val_accuracy: 0.6745\n"
          ]
        }
      ],
      "source": [
        "# Fit the model\n",
        "\n",
        "history_model_1 = model_1.fit(X_train, y_train, epochs=20, validation_split=0.2, batch_size=128, verbose = 1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NBUrLnljzkKj"
      },
      "source": [
        "**Plotting the validation and training accuracies¶**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 697
        },
        "id": "0ccbS4edzoKN",
        "outputId": "1caa0cc7-a81f-42ba-c73a-25d1c763c525"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Plotting the accuracies\n",
        "\n",
        "dict_hist = history_model_1.history\n",
        "\n",
        "list_ep = [i for i in range(1, 21)]\n",
        "\n",
        "plt.figure(figsize = (8, 8))\n",
        "\n",
        "plt.plot(list_ep, dict_hist['accuracy'], ls = '--', label = 'accuracy')\n",
        "\n",
        "plt.plot(list_ep, dict_hist['val_accuracy'], ls = '--', label = 'val_accuracy')\n",
        "\n",
        "plt.ylabel('Accuracy')\n",
        "\n",
        "plt.xlabel('Epochs')\n",
        "\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E3pFC3it0B-z"
      },
      "source": [
        "**Observations:**\n",
        "\n",
        "    The Accuracy of both training and validation is almost symetric. This is a good indicator that the model is not overfitting the training dataset.\n",
        "    The Accuracy starts to increase steadily until epoch 6, then it increases in a lower rate until epoch 17 where we observe minimum increase afterward.\n",
        "    We can see that the accuracy of validation dataset is slightly higher than the training dataset until epoch 10, where they start replacing places. This could give a sign that the model starts to fit the training dataset better, but not to the point of overfitting yet.\n",
        "    Overall, the model is not overfit and is giving accuracy of 0.7 on training dataset and roughly the same on validation dataset.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-birqQHh0d-5"
      },
      "source": [
        "Building one more model with higher complexity to see if we can improve the performance of the model.\n",
        "\n",
        "First, we need to clear the previous model's history from the Keras backend and also, fix the seed again after clearing the backend.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "2KQMwg6Wuf3_"
      },
      "outputs": [],
      "source": [
        "# Clearing backend\n",
        "\n",
        "from tensorflow.keras import backend\n",
        "\n",
        "backend.clear_session()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "30rPwmAOx3vD"
      },
      "outputs": [],
      "source": [
        "# Fixing the seed for random number generators\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "import random\n",
        "\n",
        "random.seed(42)\n",
        "\n",
        "tf.random.set_seed(42)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FW6hSKOS1Nwl"
      },
      "source": [
        "**Second Model Architecture**\n",
        "\n",
        "    Write a function that returns a sequential model with the following architecture:\n",
        "        First hidden layer with 256 nodes and the relu activation and the input shape = (1024, )\n",
        "        Second hidden layer with 128 nodes and the relu activation\n",
        "        Add the Dropout layer with the rate equal to 0.2\n",
        "        Third hidden layer with 64 nodes and the relu activation\n",
        "        Fourth hidden layer with 64 nodes and the relu activation\n",
        "        Fifth hidden layer with 32 nodes and the relu activation\n",
        "        Add the BatchNormalization layer\n",
        "        Output layer with activation as 'softmax' and number of nodes equal to the number of classes, i.e., 10\n",
        "        Compile the model with the loss equal to categorical_crossentropy, optimizer equal to Adam(learning_rate = 0.0005), and metric equal to 'accuracy'. Do not fit the model here, just return the compiled model.\n",
        "    Call the nn_model_2 function and store the model in a new variable.\n",
        "    Print the summary of the model.\n",
        "    Fit on the train data with a validation split of 0.2, batch size = 128, verbose = 1, and epochs = 30. Store the model building history to use later for visualization.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hi2k4zHY04-u"
      },
      "source": [
        "Build and train the new ANN model as per the above mentioned architecture"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "qcZOgixt1Tg5"
      },
      "outputs": [],
      "source": [
        "# Define the model\n",
        "\n",
        "def nn_model_2():\n",
        "\n",
        "    model = Sequential()\n",
        "\n",
        "    # Add layers as per the architecture mentioned above in the same sequence\n",
        "\n",
        "    model.add(Dense(265, input_dim=1024, activation='relu'))\n",
        "\n",
        "    model.add(Dense(128, activation='relu'))\n",
        "\n",
        "    model.add(Dropout(rate=0.2))\n",
        "\n",
        "    model.add(Dense(64, activation='relu'))\n",
        "\n",
        "    model.add(Dense(64, activation='relu'))\n",
        "\n",
        "    model.add(Dense(32, activation='relu'))\n",
        "\n",
        "    model.add(BatchNormalization())\n",
        "\n",
        "    model.add(Dense(10, activation='softmax'))\n",
        "\n",
        "     #declare adam optimizer with learning rate of 0.0005\n",
        "    adam = optimizers.Adam(learning_rate=0.0005)\n",
        "\n",
        "    # Compile the model\n",
        "\n",
        "    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "\n",
        "    return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "fH0nKceAuhos"
      },
      "outputs": [],
      "source": [
        "# Build the model\n",
        "model_2 = nn_model_2()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T22LSk9m5Ja6",
        "outputId": "4569810e-2776-4ed6-ee4c-9bff5e34bd58"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense (Dense)               (None, 265)               271625    \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 128)               34048     \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 128)               0         \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 64)                8256      \n",
            "                                                                 \n",
            " dense_3 (Dense)             (None, 64)                4160      \n",
            "                                                                 \n",
            " dense_4 (Dense)             (None, 32)                2080      \n",
            "                                                                 \n",
            " batch_normalization (BatchN  (None, 32)               128       \n",
            " ormalization)                                                   \n",
            "                                                                 \n",
            " dense_5 (Dense)             (None, 10)                330       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 320,627\n",
            "Trainable params: 320,563\n",
            "Non-trainable params: 64\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "#Print the model summary\n",
        "model_2.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J910N0C_5LqL",
        "outputId": "87b6de96-c434-47d9-b646-2df46a6088b0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/30\n",
            "263/263 [==============================] - 4s 10ms/step - loss: 2.3231 - accuracy: 0.0999 - val_loss: 2.3074 - val_accuracy: 0.1000\n",
            "Epoch 2/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 2.3041 - accuracy: 0.1051 - val_loss: 2.3056 - val_accuracy: 0.1046\n",
            "Epoch 3/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 2.2079 - accuracy: 0.1493 - val_loss: 2.1155 - val_accuracy: 0.1845\n",
            "Epoch 4/30\n",
            "263/263 [==============================] - 4s 14ms/step - loss: 1.8862 - accuracy: 0.2832 - val_loss: 1.9102 - val_accuracy: 0.2899\n",
            "Epoch 5/30\n",
            "263/263 [==============================] - 3s 13ms/step - loss: 1.6231 - accuracy: 0.4242 - val_loss: 1.5350 - val_accuracy: 0.4667\n",
            "Epoch 6/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 1.4117 - accuracy: 0.5220 - val_loss: 1.4076 - val_accuracy: 0.5356\n",
            "Epoch 7/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 1.2879 - accuracy: 0.5734 - val_loss: 1.2510 - val_accuracy: 0.5825\n",
            "Epoch 8/30\n",
            "263/263 [==============================] - 3s 10ms/step - loss: 1.2255 - accuracy: 0.5950 - val_loss: 1.2080 - val_accuracy: 0.5976\n",
            "Epoch 9/30\n",
            "263/263 [==============================] - 3s 10ms/step - loss: 1.1720 - accuracy: 0.6178 - val_loss: 1.1584 - val_accuracy: 0.6260\n",
            "Epoch 10/30\n",
            "263/263 [==============================] - 4s 17ms/step - loss: 1.1363 - accuracy: 0.6301 - val_loss: 1.1196 - val_accuracy: 0.6333\n",
            "Epoch 11/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 1.1113 - accuracy: 0.6397 - val_loss: 1.0941 - val_accuracy: 0.6483\n",
            "Epoch 12/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 1.0965 - accuracy: 0.6429 - val_loss: 1.0763 - val_accuracy: 0.6474\n",
            "Epoch 13/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 1.0732 - accuracy: 0.6503 - val_loss: 1.0780 - val_accuracy: 0.6546\n",
            "Epoch 14/30\n",
            "263/263 [==============================] - 3s 12ms/step - loss: 1.0675 - accuracy: 0.6549 - val_loss: 1.0930 - val_accuracy: 0.6400\n",
            "Epoch 15/30\n",
            "263/263 [==============================] - 4s 14ms/step - loss: 1.0387 - accuracy: 0.6656 - val_loss: 0.9920 - val_accuracy: 0.6821\n",
            "Epoch 16/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 1.0265 - accuracy: 0.6705 - val_loss: 1.0218 - val_accuracy: 0.6658\n",
            "Epoch 17/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 1.0107 - accuracy: 0.6752 - val_loss: 0.9644 - val_accuracy: 0.6923\n",
            "Epoch 18/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 0.9935 - accuracy: 0.6820 - val_loss: 0.9533 - val_accuracy: 0.6983\n",
            "Epoch 19/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 0.9857 - accuracy: 0.6835 - val_loss: 0.9618 - val_accuracy: 0.6957\n",
            "Epoch 20/30\n",
            "263/263 [==============================] - 4s 14ms/step - loss: 0.9671 - accuracy: 0.6907 - val_loss: 0.9834 - val_accuracy: 0.6830\n",
            "Epoch 21/30\n",
            "263/263 [==============================] - 3s 11ms/step - loss: 0.9794 - accuracy: 0.6865 - val_loss: 0.9549 - val_accuracy: 0.6948\n",
            "Epoch 22/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 0.9705 - accuracy: 0.6866 - val_loss: 0.9261 - val_accuracy: 0.7083\n",
            "Epoch 23/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 0.9503 - accuracy: 0.6936 - val_loss: 0.9590 - val_accuracy: 0.6921\n",
            "Epoch 24/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 0.9517 - accuracy: 0.6946 - val_loss: 0.9642 - val_accuracy: 0.6924\n",
            "Epoch 25/30\n",
            "263/263 [==============================] - 3s 12ms/step - loss: 0.9407 - accuracy: 0.6989 - val_loss: 0.9002 - val_accuracy: 0.7168\n",
            "Epoch 26/30\n",
            "263/263 [==============================] - 3s 13ms/step - loss: 0.9408 - accuracy: 0.6971 - val_loss: 0.9369 - val_accuracy: 0.6940\n",
            "Epoch 27/30\n",
            "263/263 [==============================] - 3s 9ms/step - loss: 0.9223 - accuracy: 0.7039 - val_loss: 0.9280 - val_accuracy: 0.7086\n",
            "Epoch 28/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 0.9320 - accuracy: 0.7022 - val_loss: 0.9520 - val_accuracy: 0.6957\n",
            "Epoch 29/30\n",
            "263/263 [==============================] - 2s 9ms/step - loss: 0.9155 - accuracy: 0.7068 - val_loss: 0.9359 - val_accuracy: 0.7004\n",
            "Epoch 30/30\n",
            "263/263 [==============================] - 3s 10ms/step - loss: 0.9220 - accuracy: 0.7032 - val_loss: 0.9032 - val_accuracy: 0.7135\n"
          ]
        }
      ],
      "source": [
        "# Fit the model\n",
        "history_model_2 = model_2.fit(X_train,y_train, epochs=30, validation_split=0.2, batch_size=128, verbose = 1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uTABiCgh6D_o"
      },
      "source": [
        "**Plotting the validation and training accuracies**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 696
        },
        "id": "T0UAMKgR57kd",
        "outputId": "f0dacd34-1dc1-46ca-b612-d977b33c61dd"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Plotting the accuracies\n",
        "\n",
        "dict_hist = history_model_2.history\n",
        "\n",
        "list_ep = [i for i in range(1, 31)]\n",
        "\n",
        "plt.figure(figsize = (8, 8))\n",
        "\n",
        "plt.plot(list_ep, dict_hist['accuracy'], ls = '--', label = 'accuracy')\n",
        "\n",
        "plt.plot(list_ep, dict_hist['val_accuracy'], ls = '--', label = 'val_accuracy')\n",
        "\n",
        "plt.ylabel('Accuracy')\n",
        "\n",
        "plt.xlabel('Epochs')\n",
        "\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NespbSKp6X_I"
      },
      "source": [
        "**Observation:**\n",
        "    Accuracy of both training dataset and validation dataset is symetric to some level. This rejects any overfitting concerns.\n",
        "    Accuracy of both is growing rapidly as the model progresses with epochs to 8, then accuracy still improves, but slowly.\n",
        "    After epoch 7 we can see small ups and downs in the validation dataset accuracy. This is not a concern as the overall trend is positive.\n",
        "    Overall the model is better than the previous with accuracy of 0.77 compared to 0.70.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tWoK30fH6xde"
      },
      "source": [
        "**Predictions on the test data**\n",
        "\n",
        "    Making predictions on the test set using the second model.\n",
        "    Printing out results using the classification report and the confusion matrix with final observations on the results listed below.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EBpgEDrY58nL",
        "outputId": "98072b9d-623c-4521-8fe4-59c79ca460ee"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "563/563 [==============================] - 2s 3ms/step\n",
            "(18000,)\n"
          ]
        }
      ],
      "source": [
        "test_pred = model_2.predict(X_test)\n",
        "\n",
        "test_pred = np.argmax(test_pred, axis = -1)\n",
        "\n",
        "print(test_pred.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qktNrawL7SDc"
      },
      "source": [
        "We noticed earleir that each entry of the target variable is a one-hot encoded vector but to print the classification report and confusion matrix, we must convert each entry of y_test to a single label."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "zHihB7q97bF7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b5ff74ba-0dd1-43c7-df4f-c91b59c2e650"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(18000,)\n"
          ]
        }
      ],
      "source": [
        "# Converting each entry to single label from one-hot encoded vector\n",
        "\n",
        "y_test = np.argmax(y_test, axis = -1)\n",
        "print(y_test.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NykAt36B7tgb"
      },
      "source": [
        "**Printing the classification report and the confusion matrix for the test predictions with observations.**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 769
        },
        "id": "wuRnSyNj71YC",
        "outputId": "6451c843-5d9a-4dde-c610-119a6bacdb44"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.76      0.70      0.73      1814\n",
            "           1       0.68      0.75      0.71      1828\n",
            "           2       0.67      0.78      0.72      1803\n",
            "           3       0.70      0.67      0.68      1719\n",
            "           4       0.70      0.82      0.75      1812\n",
            "           5       0.67      0.65      0.66      1768\n",
            "           6       0.73      0.70      0.71      1832\n",
            "           7       0.75      0.77      0.76      1808\n",
            "           8       0.75      0.60      0.67      1812\n",
            "           9       0.73      0.66      0.69      1804\n",
            "\n",
            "    accuracy                           0.71     18000\n",
            "   macro avg       0.71      0.71      0.71     18000\n",
            "weighted avg       0.71      0.71      0.71     18000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "\n",
        "#importing required functions\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "#Printing the classification report\n",
        "print(classification_report(y_test, test_pred))\n",
        "\n",
        "#Plotting the heatmap using confusion matrix\n",
        "cm = confusion_matrix(y_test, test_pred)\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.heatmap(cm, annot=True,  fmt='.0f')\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NrC0TIjO9DQd"
      },
      "source": [
        "**Observation:**\n",
        "\n",
        "    The classification report tells us that numbers 0 and 4 have the highest f1-score (0.75) meaning they have the best chances of being accurately recognized. Whereas, numbers 3 and 8 have the lowest f1-score of (0.68 and 0.67).\n",
        "    Number 2 and 5 have the lowest precision and 0 has the highest, this means that the model is classifing other numbers as 3 which not valid. Whereas 0 has the lowest chances of being invalidly positive.\n",
        "    Number 4 has the highest recall, whereas 8 has the lowest. It indicates that the model is struggling to identify all 5's, 8's, and 9's as what they are. Opposed to 4, which the model identifies in high rates of completion.\n",
        "    The confusion matrix shows that the model confused 5 with 3 and 6 with 8. This complements the above obervations about 3, 5 and 6. which assures that they are having some prediction issues in general.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ycom3d8b95An"
      },
      "source": [
        "**Using Convolutional Neural Networks**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "xGOUG7fdBLTx"
      },
      "outputs": [],
      "source": [
        "# Loading the dataset\n",
        "\n",
        "import h5py\n",
        "\n",
        "h5f = h5py.File('/content/drive/MyDrive/MIT-ADSP/SVHN_single_grey1.h5', 'r')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "P9Kj_qnDOWVi"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "sXruqT6EOXbu"
      },
      "outputs": [],
      "source": [
        "#importing necessary libraries\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, Activation, BatchNormalization\n",
        "from tensorflow.keras.utils import to_categorical"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6V9zvj3LJoSE"
      },
      "source": [
        "**Load the dataset again and split the data into the train and the test dataset.**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "WPFvaC-y9Myc"
      },
      "outputs": [],
      "source": [
        "X_train = h5f['X_train'][:]\n",
        "\n",
        "y_train = h5f['y_train'][:]\n",
        "\n",
        "X_test = h5f['X_test'][:]\n",
        "\n",
        "y_test2 = h5f['y_test'][:]\n",
        "\n",
        "\n",
        "# Close this file\n",
        "\n",
        "h5f.close()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gday1z4gJxv-"
      },
      "source": [
        "Check the number of images in the training and the testing dataset.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tWn7tFZiBJOU",
        "outputId": "bb6cf1d5-0e09-4970-edd8-8274c2605c69"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(42000, 18000)"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "len(X_train), len(X_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pcpOTDqkJXs1"
      },
      "source": [
        "**Observation:**\n",
        "There are 42,000 images in the training data and 18,000 images in the testing data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fp0YRNjIKAFl"
      },
      "source": [
        "**Data preparation**\n",
        "\n",
        "    Print the shape and the array of pixels for the first image in the training dataset.\n",
        "    Reshape the train and the test dataset because we always have to give a 4D array as input to CNNs.\n",
        "    Normalize the train and the test dataset by dividing by 255.\n",
        "    Print the new shapes of the train and the test dataset.\n",
        "    One-hot encode the target variable.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pxls2E7GJf6e",
        "outputId": "fefb2f91-7f6f-436e-9a8d-57528c5d99bd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape: (32, 32)\n",
            "\n",
            "First image:\n",
            " [[ 33.0704  30.2601  26.852  ...  71.4471  58.2204  42.9939]\n",
            " [ 25.2283  25.5533  29.9765 ... 113.0209 103.3639  84.2949]\n",
            " [ 26.2775  22.6137  40.4763 ... 113.3028 121.775  115.4228]\n",
            " ...\n",
            " [ 28.5502  36.212   45.0801 ...  24.1359  25.0927  26.0603]\n",
            " [ 38.4352  26.4733  23.2717 ...  28.1094  29.4683  30.0661]\n",
            " [ 50.2984  26.0773  24.0389 ...  49.6682  50.853   53.0377]]\n"
          ]
        }
      ],
      "source": [
        "# Shape and the array of pixels for the first image\n",
        "\n",
        "print(\"Shape:\", X_train[0].shape)\n",
        "\n",
        "print()\n",
        "\n",
        "print(\"First image:\\n\", X_train[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "ispL3TOLKVj0"
      },
      "outputs": [],
      "source": [
        "# Reshaping the dataset to be able to pass them to CNNs. Remember that we always have to give a 4D array as input to CNNs\n",
        "\n",
        "X_train = X_train.reshape(X_train.shape[0], 32, 32, 1)\n",
        "\n",
        "X_test = X_test.reshape(X_test.shape[0], 32, 32, 1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "4X5DC-idKWQf"
      },
      "outputs": [],
      "source": [
        "# Normalize inputs from 0-255 to 0-1\n",
        "\n",
        "X_train = X_train / 255.0\n",
        "\n",
        "X_test = X_test / 255.0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yUiL7G_6KW3p",
        "outputId": "0aa32497-ec7d-4f68-c14f-cfe2bce43c82"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set: (42000, 32, 32, 1) (42000,)\n",
            "Test set: (18000, 32, 32, 1) (18000,)\n"
          ]
        }
      ],
      "source": [
        "# New shape\n",
        "\n",
        "print('Training set:', X_train.shape, y_train.shape)\n",
        "\n",
        "print('Test set:', X_test.shape, y_test2.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qdQf0IcoLFCg"
      },
      "source": [
        "**One-hot encode the labels in the target variable y_train and y_test.**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xNTfX8OO3iBA",
        "outputId": "3e06f851-65d5-4034-9a9b-aada28b56d8c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ytest (18000, 10)\n"
          ]
        }
      ],
      "source": [
        "# One-hot encode output\n",
        "\n",
        "y_train = to_categorical(y_train)\n",
        "\n",
        "y_test2 = to_categorical(y_test2)\n",
        "\n",
        "# Test labels\n",
        "\n",
        "y_test2\n",
        "print('ytest', y_test2.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1Isx6Q6vLXUP"
      },
      "source": [
        "Each entry of y_test is a one-hot encoded vector instead of a single label."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NcOVGrf_LobO"
      },
      "source": [
        "**Model Building**\n",
        "\n",
        "With data preprocessing done, next step is building a CNN model.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "id": "mOE-osJ7LVPf"
      },
      "outputs": [],
      "source": [
        "# Fixing the seed for random number generators\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "import random\n",
        "\n",
        "random.seed(42)\n",
        "\n",
        "tf.random.set_seed(42)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i9Z6Bl_1MGq9"
      },
      "source": [
        "**Model Architecture**\n",
        "\n",
        "    Write a function that returns a sequential model with the following architecture:\n",
        "        First Convolutional layer with 16 filters and the kernel size of 3x3. Use the 'same' padding and provide the input shape = (32, 32, 1)\n",
        "        Add a LeakyRelu layer with the slope equal to 0.1\n",
        "        Second Convolutional layer with 32 filters and the kernel size of 3x3 with 'same' padding\n",
        "        Another LeakyRelu with the slope equal to 0.1\n",
        "        A max-pooling layer with a pool size of 2x2\n",
        "        Flatten the output from the previous layer\n",
        "        Add a dense layer with 32 nodes\n",
        "        Add a LeakyRelu layer with the slope equal to 0.1\n",
        "        Add the final output layer with nodes equal to the number of classes, i.e., 10 and 'softmax' as the activation function\n",
        "        Compile the model with the loss equal to categorical_crossentropy, optimizer equal to Adam(learning_rate = 0.001), and metric equal to 'accuracy'. Do not fit the model here, just return the compiled model.\n",
        "    Call the function cnn_model_1 and store the output in a new variable.\n",
        "    Print the summary of the model.\n",
        "    Fit the model on the training data with a validation split of 0.2, batch size = 32, verbose = 1, and epochs = 20. Store the model building history to use later for visualization.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Cjv5IF_pMVJh"
      },
      "source": [
        "**Build and train a CNN model as per the above mentioned architecture.**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "V89QQlEfo-QZ"
      },
      "outputs": [],
      "source": [
        "#Importing losses and optimizers modules\n",
        "from tensorflow.keras import losses\n",
        "from tensorflow.keras import optimizers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "id": "yipITweER2_g"
      },
      "outputs": [],
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Dropout, Activation, Flatten\n",
        "from keras.layers import Convolution2D, MaxPooling2D\n",
        "from keras.layers import LeakyReLU\n",
        "from keras.optimizers import SGD"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "id": "W_JqSWF_LVNd"
      },
      "outputs": [],
      "source": [
        "\n",
        "#Define the function\n",
        "def cnn_model_1():\n",
        "    model = Sequential()\n",
        "    model.add(Convolution2D(filters=16, kernel_size=(3, 3), padding=\"same\", input_shape=(32, 32, 1)))\n",
        "    model.add(LeakyReLU(0.1))\n",
        "    model.add(Convolution2D(filters=32, kernel_size=(3, 3), padding=\"same\"))\n",
        "    model.add(LeakyReLU(0.1))\n",
        "    model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "    model.add(Flatten())\n",
        "    model.add(Dense(32))\n",
        "    model.add(LeakyReLU(0.1))\n",
        "    model.add(Dense(10, activation='softmax'))\n",
        "\n",
        "    #declare adam optimizer with learning rate of 0.001\n",
        "    adam = optimizers.Adam(learning_rate = 0.001)\n",
        "\n",
        "    #compile the model\n",
        "    model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])\n",
        "\n",
        "    return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "id": "YG6oIx97RjrU"
      },
      "outputs": [],
      "source": [
        "# Build the model\n",
        "\n",
        "cnn_model_1 = cnn_model_1()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SA4oKR5gSjLe",
        "outputId": "fc323895-0c81-4931-98f0-3b78e0cf2e24"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 32, 32, 16)        160       \n",
            "                                                                 \n",
            " leaky_re_lu (LeakyReLU)     (None, 32, 32, 16)        0         \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 32, 32, 32)        4640      \n",
            "                                                                 \n",
            " leaky_re_lu_1 (LeakyReLU)   (None, 32, 32, 32)        0         \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 16, 16, 32)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 8192)              0         \n",
            "                                                                 \n",
            " dense_6 (Dense)             (None, 32)                262176    \n",
            "                                                                 \n",
            " leaky_re_lu_2 (LeakyReLU)   (None, 32)                0         \n",
            "                                                                 \n",
            " dense_7 (Dense)             (None, 10)                330       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 267,306\n",
            "Trainable params: 267,306\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "#Print the model summary\n",
        "cnn_model_1.summary()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xanYSxKtSqjr",
        "outputId": "3f518a18-53c3-40fa-ffea-c7d6c2345467"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "1050/1050 [==============================] - 87s 82ms/step - loss: 1.1274 - accuracy: 0.6303 - val_loss: 0.6497 - val_accuracy: 0.8087\n",
            "Epoch 2/20\n",
            "1050/1050 [==============================] - 83s 79ms/step - loss: 0.5352 - accuracy: 0.8475 - val_loss: 0.5254 - val_accuracy: 0.8448\n",
            "Epoch 3/20\n",
            "1050/1050 [==============================] - 83s 79ms/step - loss: 0.4416 - accuracy: 0.8700 - val_loss: 0.5049 - val_accuracy: 0.8532\n",
            "Epoch 4/20\n",
            "1050/1050 [==============================] - 87s 83ms/step - loss: 0.3781 - accuracy: 0.8888 - val_loss: 0.4486 - val_accuracy: 0.8739\n",
            "Epoch 5/20\n",
            "1050/1050 [==============================] - 80s 76ms/step - loss: 0.3330 - accuracy: 0.9004 - val_loss: 0.4592 - val_accuracy: 0.8717\n",
            "Epoch 6/20\n",
            "1050/1050 [==============================] - 82s 78ms/step - loss: 0.2944 - accuracy: 0.9115 - val_loss: 0.4640 - val_accuracy: 0.8735\n",
            "Epoch 7/20\n",
            "1050/1050 [==============================] - 79s 75ms/step - loss: 0.2622 - accuracy: 0.9216 - val_loss: 0.4506 - val_accuracy: 0.8807\n",
            "Epoch 8/20\n",
            "1050/1050 [==============================] - 81s 77ms/step - loss: 0.2332 - accuracy: 0.9279 - val_loss: 0.4920 - val_accuracy: 0.8681\n",
            "Epoch 9/20\n",
            "1050/1050 [==============================] - 83s 79ms/step - loss: 0.2094 - accuracy: 0.9365 - val_loss: 0.4703 - val_accuracy: 0.8782\n",
            "Epoch 10/20\n",
            "1050/1050 [==============================] - 83s 79ms/step - loss: 0.1873 - accuracy: 0.9424 - val_loss: 0.4922 - val_accuracy: 0.8782\n",
            "Epoch 11/20\n",
            "1050/1050 [==============================] - 80s 76ms/step - loss: 0.1663 - accuracy: 0.9471 - val_loss: 0.5408 - val_accuracy: 0.8752\n",
            "Epoch 12/20\n",
            "1050/1050 [==============================] - 82s 78ms/step - loss: 0.1521 - accuracy: 0.9519 - val_loss: 0.5748 - val_accuracy: 0.8701\n",
            "Epoch 13/20\n",
            "1050/1050 [==============================] - 80s 76ms/step - loss: 0.1331 - accuracy: 0.9571 - val_loss: 0.6197 - val_accuracy: 0.8671\n",
            "Epoch 14/20\n",
            "1050/1050 [==============================] - 82s 78ms/step - loss: 0.1233 - accuracy: 0.9601 - val_loss: 0.6305 - val_accuracy: 0.8640\n",
            "Epoch 15/20\n",
            "1050/1050 [==============================] - 79s 76ms/step - loss: 0.1132 - accuracy: 0.9633 - val_loss: 0.6549 - val_accuracy: 0.8707\n",
            "Epoch 16/20\n",
            "1050/1050 [==============================] - 81s 77ms/step - loss: 0.1008 - accuracy: 0.9669 - val_loss: 0.7015 - val_accuracy: 0.8658\n",
            "Epoch 17/20\n",
            "1050/1050 [==============================] - 81s 77ms/step - loss: 0.0929 - accuracy: 0.9704 - val_loss: 0.6903 - val_accuracy: 0.8750\n",
            "Epoch 18/20\n",
            "1050/1050 [==============================] - 88s 84ms/step - loss: 0.0798 - accuracy: 0.9749 - val_loss: 0.7664 - val_accuracy: 0.8681\n",
            "Epoch 19/20\n",
            "1050/1050 [==============================] - 86s 82ms/step - loss: 0.0778 - accuracy: 0.9744 - val_loss: 0.7585 - val_accuracy: 0.8714\n",
            "Epoch 20/20\n",
            "1050/1050 [==============================] - 82s 78ms/step - loss: 0.0742 - accuracy: 0.9756 - val_loss: 0.8155 - val_accuracy: 0.8701\n"
          ]
        }
      ],
      "source": [
        "# Fit the model\n",
        "\n",
        "history_cnn_model_1 = cnn_model_1.fit(X_train, y_train,\n",
        "            epochs=20,\n",
        "            validation_split=0.2,\n",
        "            batch_size = 32,\n",
        "            verbose=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FulkFcx4cp-j"
      },
      "source": [
        "**Plotting the Training and Validation Accuracies with observations.**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 696
        },
        "id": "s9dbmVb6clE_",
        "outputId": "88ae7be7-e345-4714-947e-47ab434c0205"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Plotting the accuracies\n",
        "\n",
        "dict_hist = history_cnn_model_1.history\n",
        "\n",
        "list_ep = [i for i in range(1, 21)]\n",
        "\n",
        "plt.figure(figsize = (8, 8))\n",
        "\n",
        "plt.plot(list_ep, dict_hist['accuracy'], ls = '--', label = 'accuracy')\n",
        "\n",
        "plt.plot(list_ep, dict_hist['val_accuracy'], ls = '--', label = 'val_accuracy')\n",
        "\n",
        "plt.ylabel('Accuracy')\n",
        "\n",
        "plt.xlabel('Epochs')\n",
        "\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CvEicWfIc18W"
      },
      "source": [
        "**Observations:**\n",
        "\n",
        "    We can see from the above plot that the model has done poorly on the validation data. The model is overfitting the training data.\n",
        "    The validation accuracy has become more or less constant after 2 epochs.\n",
        "    The increasing rate of accuracy is lower afte 2 epochs.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9ekox2EUePQd"
      },
      "source": [
        "**Building another model to see if we can get a better model with generalized performance.**\n",
        "\n",
        "First, we need to clear the previous model's history from the Keras backend and also fix the seed again after clearing the backend."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "id": "XMdH8nvbcla2"
      },
      "outputs": [],
      "source": [
        "# Clearing backend\n",
        "\n",
        "from tensorflow.keras import backend\n",
        "\n",
        "backend.clear_session()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "id": "tlg_tWROepq1"
      },
      "outputs": [],
      "source": [
        "# Fixing the seed for random number generators\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "import random\n",
        "\n",
        "random.seed(42)\n",
        "\n",
        "tf.random.set_seed(42)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6dqkV2uqexc9"
      },
      "source": [
        "**Second Model Architecture**\n",
        "\n",
        "    Writing a function that returns a sequential model with the following architecture:\n",
        "        First Convolutional layer with 16 filters and the kernel size of 3x3. Use the 'same' padding and provide the input shape = (32, 32, 1)\n",
        "        Add a LeakyRelu layer with the slope equal to 0.1\n",
        "        Second Convolutional layer with 32 filters and the kernel size of 3x3 with 'same' padding\n",
        "        Add LeakyRelu with the slope equal to 0.1\n",
        "        Add a max-pooling layer with a pool size of 2x2\n",
        "        Add a BatchNormalization layer\n",
        "        Third Convolutional layer with 32 filters and the kernel size of 3x3 with 'same' padding\n",
        "        Add a LeakyRelu layer with the slope equal to 0.1\n",
        "        Fourth Convolutional layer 64 filters and the kernel size of 3x3 with 'same' padding\n",
        "        Add a LeakyRelu layer with the slope equal to 0.1\n",
        "        Add a max-pooling layer with a pool size of 2x2\n",
        "        Add a BatchNormalization layer\n",
        "        Flatten the output from the previous layer\n",
        "        Add a dense layer with 32 nodes\n",
        "        Add a LeakyRelu layer with the slope equal to 0.1\n",
        "        Add a dropout layer with the rate equal to 0.5\n",
        "        Add the final output layer with nodes equal to the number of classes, i.e., 10 and 'softmax' as the activation function\n",
        "        Compile the model with the categorical_crossentropy loss, adam optimizers (learning_rate = 0.001), and metric equal to 'accuracy'. Do not fit the model here, just return the compiled model.\n",
        "\n",
        "    The function would be called cnn_model_2 and the model would be stored in a new variable.\n",
        "\n",
        "    Summary of the model will be printed.\n",
        "\n",
        "    The model will be fitted on the train data with a validation split of 0.2, batch size = 128, verbose = 1, and epochs = 30. The model will then be stored building history to use later for visualization.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {
        "id": "cKtYcPhzRZEB"
      },
      "outputs": [],
      "source": [
        "#Importing losses and optimizers modules\n",
        "from tensorflow.keras import losses\n",
        "from tensorflow.keras import optimizers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {
        "id": "12LvxCF8n1wy"
      },
      "outputs": [],
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Dropout, Activation, Flatten\n",
        "from keras.layers import Convolution2D, MaxPooling2D, BatchNormalization\n",
        "from keras.layers import LeakyReLU\n",
        "from keras.optimizers import SGD"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {
        "id": "6blW6k7-b1ub"
      },
      "outputs": [],
      "source": [
        "\n",
        "#Define the function\n",
        "def cnn_model_2():\n",
        "    model = Sequential()\n",
        "    model.add(Convolution2D(filters=16, kernel_size=(3, 3), padding=\"same\", input_shape=(32, 32, 1)))\n",
        "    model.add(LeakyReLU(0.1))\n",
        "    model.add(Convolution2D(filters=32, kernel_size=(3, 3), padding=\"same\"))\n",
        "    model.add(LeakyReLU(0.1))\n",
        "    model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "    model.add(BatchNormalization())\n",
        "    model.add(Convolution2D(filters=32, kernel_size=(3, 3), padding=\"same\"))\n",
        "    model.add(LeakyReLU(0.1))\n",
        "    model.add(Convolution2D(filters=64, kernel_size=(3, 3), padding=\"same\"))\n",
        "    model.add(LeakyReLU(0.1))\n",
        "    model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "    model.add(BatchNormalization())\n",
        "    model.add(Flatten())\n",
        "    model.add(Dense(32))\n",
        "    model.add(LeakyReLU(0.1))\n",
        "    model.add(Dropout(0.5))\n",
        "    model.add(Dense(10, activation='softmax'))\n",
        "\n",
        " #declare adam optimizer with learning rate of 0.001\n",
        "    adam = optimizers.Adam(learning_rate = 0.001)\n",
        "\n",
        "    #compile the model\n",
        "    model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])\n",
        "\n",
        "    return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {
        "id": "a-zre6mXkJ6y"
      },
      "outputs": [],
      "source": [
        "# Build the model\n",
        "cnn_model_2 = cnn_model_2()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BJ8MS0exkX1l",
        "outputId": "4237e8fe-e77a-4557-c33c-ed7b7924379f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 32, 32, 16)        160       \n",
            "                                                                 \n",
            " leaky_re_lu (LeakyReLU)     (None, 32, 32, 16)        0         \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 32, 32, 32)        4640      \n",
            "                                                                 \n",
            " leaky_re_lu_1 (LeakyReLU)   (None, 32, 32, 32)        0         \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 16, 16, 32)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " batch_normalization (BatchN  (None, 16, 16, 32)       128       \n",
            " ormalization)                                                   \n",
            "                                                                 \n",
            " conv2d_2 (Conv2D)           (None, 16, 16, 32)        9248      \n",
            "                                                                 \n",
            " leaky_re_lu_2 (LeakyReLU)   (None, 16, 16, 32)        0         \n",
            "                                                                 \n",
            " conv2d_3 (Conv2D)           (None, 16, 16, 64)        18496     \n",
            "                                                                 \n",
            " leaky_re_lu_3 (LeakyReLU)   (None, 16, 16, 64)        0         \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPooling  (None, 8, 8, 64)         0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " batch_normalization_1 (Batc  (None, 8, 8, 64)         256       \n",
            " hNormalization)                                                 \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 4096)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 32)                131104    \n",
            "                                                                 \n",
            " leaky_re_lu_4 (LeakyReLU)   (None, 32)                0         \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 32)                0         \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 10)                330       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 164,362\n",
            "Trainable params: 164,170\n",
            "Non-trainable params: 192\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "#Print the summary\n",
        "cnn_model_2.summary()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 55,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4ZAT0eB6kZdv",
        "outputId": "f3482567-0ae9-49cc-aa0a-f3244f80b28f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "1050/1050 [==============================] - 159s 147ms/step - loss: 1.1213 - accuracy: 0.6363 - val_loss: 0.5838 - val_accuracy: 0.8367\n",
            "Epoch 2/20\n",
            "1050/1050 [==============================] - 148s 141ms/step - loss: 0.6318 - accuracy: 0.8100 - val_loss: 0.4684 - val_accuracy: 0.8652\n",
            "Epoch 3/20\n",
            "1050/1050 [==============================] - 147s 140ms/step - loss: 0.5289 - accuracy: 0.8372 - val_loss: 0.4400 - val_accuracy: 0.8769\n",
            "Epoch 4/20\n",
            "1050/1050 [==============================] - 145s 138ms/step - loss: 0.4788 - accuracy: 0.8562 - val_loss: 0.4196 - val_accuracy: 0.8779\n",
            "Epoch 5/20\n",
            "1050/1050 [==============================] - 145s 138ms/step - loss: 0.4377 - accuracy: 0.8681 - val_loss: 0.4006 - val_accuracy: 0.8855\n",
            "Epoch 6/20\n",
            "1050/1050 [==============================] - 142s 135ms/step - loss: 0.4031 - accuracy: 0.8782 - val_loss: 0.3997 - val_accuracy: 0.8867\n",
            "Epoch 7/20\n",
            "1050/1050 [==============================] - 141s 134ms/step - loss: 0.3750 - accuracy: 0.8864 - val_loss: 0.3958 - val_accuracy: 0.8913\n",
            "Epoch 8/20\n",
            "1050/1050 [==============================] - 146s 139ms/step - loss: 0.3476 - accuracy: 0.8941 - val_loss: 0.3636 - val_accuracy: 0.9035\n",
            "Epoch 9/20\n",
            "1050/1050 [==============================] - 151s 144ms/step - loss: 0.3293 - accuracy: 0.8979 - val_loss: 0.3748 - val_accuracy: 0.9039\n",
            "Epoch 10/20\n",
            "1050/1050 [==============================] - 146s 139ms/step - loss: 0.3165 - accuracy: 0.9031 - val_loss: 0.3651 - val_accuracy: 0.9060\n",
            "Epoch 11/20\n",
            "1050/1050 [==============================] - 145s 138ms/step - loss: 0.2904 - accuracy: 0.9096 - val_loss: 0.4153 - val_accuracy: 0.8901\n",
            "Epoch 12/20\n",
            "1050/1050 [==============================] - 146s 139ms/step - loss: 0.2805 - accuracy: 0.9126 - val_loss: 0.3508 - val_accuracy: 0.9127\n",
            "Epoch 13/20\n",
            "1050/1050 [==============================] - 149s 142ms/step - loss: 0.2636 - accuracy: 0.9168 - val_loss: 0.3937 - val_accuracy: 0.8944\n",
            "Epoch 14/20\n",
            "1050/1050 [==============================] - 149s 142ms/step - loss: 0.2557 - accuracy: 0.9186 - val_loss: 0.3652 - val_accuracy: 0.9102\n",
            "Epoch 15/20\n",
            "1050/1050 [==============================] - 146s 139ms/step - loss: 0.2420 - accuracy: 0.9241 - val_loss: 0.3614 - val_accuracy: 0.9135\n",
            "Epoch 16/20\n",
            "1050/1050 [==============================] - 141s 135ms/step - loss: 0.2368 - accuracy: 0.9248 - val_loss: 0.3685 - val_accuracy: 0.9151\n",
            "Epoch 17/20\n",
            "1050/1050 [==============================] - 142s 135ms/step - loss: 0.2230 - accuracy: 0.9284 - val_loss: 0.5917 - val_accuracy: 0.8852\n",
            "Epoch 18/20\n",
            "1050/1050 [==============================] - 145s 139ms/step - loss: 0.2194 - accuracy: 0.9295 - val_loss: 0.4182 - val_accuracy: 0.9063\n",
            "Epoch 19/20\n",
            "1050/1050 [==============================] - 144s 137ms/step - loss: 0.2087 - accuracy: 0.9319 - val_loss: 0.3831 - val_accuracy: 0.9126\n",
            "Epoch 20/20\n",
            "1050/1050 [==============================] - 144s 137ms/step - loss: 0.1973 - accuracy: 0.9362 - val_loss: 0.4564 - val_accuracy: 0.9090\n"
          ]
        }
      ],
      "source": [
        "history_cnn_model_2 = cnn_model_2.fit(X_train, y_train,\n",
        "            epochs=20,\n",
        "            validation_split=0.2,\n",
        "            batch_size = 32,\n",
        "            verbose=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fvz7bhhQkp5l"
      },
      "source": [
        "\n",
        "**Plotting the validation and training accuracies**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699
        },
        "id": "qYEt24rIkdw9",
        "outputId": "6c1d9b99-133a-4d6f-cc84-7849b2c71c59"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Plotting the accuracies\n",
        "\n",
        "dict_hist = history_cnn_model_2.history\n",
        "\n",
        "list_ep = [i for i in range(1, 21)]\n",
        "\n",
        "plt.figure(figsize = (8, 8))\n",
        "\n",
        "plt.plot(list_ep, dict_hist['accuracy'], ls = '--', label = 'accuracy')\n",
        "\n",
        "plt.plot(list_ep, dict_hist['val_accuracy'], ls = '--', label = 'val_accuracy')\n",
        "\n",
        "plt.ylabel('Accuracy')\n",
        "\n",
        "plt.xlabel('Epochs')\n",
        "\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U2yOVzIckv9q"
      },
      "source": [
        "**Observation:**\n",
        "\n",
        "    The second model with dropout layers seems to have reduced the overfitting as compared to the previous model but still the validation data ccuracy is around 5% lower than train data accuracy.\n",
        "    The overal accuracy of this model is better than the 1st model.\n",
        "    The Training accuracy is increasing with the increase in epochs. It has a rapid increase up to around 5 epochs and then seems to have very lower increase.\n",
        "    The validation accuracy is bit fluctuating but overall it is also increasing with the increase in epochs. Same as training accuracy, validation accuracy also has a rapid increase up to around 2 epochs and then has lower increase, almost like a constant.\n",
        "    The model is giving around ~90% accuracy at 30 epochs. At 30 epochs, the accuracy of the model on the training data is about 94% and the validation accuracy is ~90%.\n",
        "    The validation accuracy and train accuracy still has a about 5% difference.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KgzT68uN7gAr"
      },
      "source": [
        " **Predictions on the test data**\n",
        "\n",
        "    Make predictions on the test set using the second model.\n",
        "    Print the obtained results using the classification report and the confusion matrix.\n",
        "    Final observations on the obtained results.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RXUR0AwI7Rlx",
        "outputId": "f13a1265-6b6a-4f14-a93b-bfb69e67f3df"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "563/563 [==============================] - 19s 34ms/step\n",
            "(18000,)\n"
          ]
        }
      ],
      "source": [
        "# Make prediction on the test data using cnn_model_2\n",
        "\n",
        "test_pred = cnn_model_2.predict(X_test)\n",
        "\n",
        "test_pred = np.argmax(test_pred, axis = -1)\n",
        "\n",
        "print(test_pred.shape)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2ATLAUbS8poz"
      },
      "source": [
        "Note: Earlier, we noticed that each entry of the target variable is a one-hot encoded vector, but to print the classification report and confusion matrix, we must convert each entry of y_test to a single label."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {
        "id": "EljLqzao8rgg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "28d6ebdd-a131-4b68-9af6-a3559bcb272c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(18000,)\n"
          ]
        }
      ],
      "source": [
        "# Converting each entry to single label from one-hot encoded vector\n",
        "\n",
        "y_test2 = np.argmax(y_test2, axis = -1)\n",
        "\n",
        "\n",
        "print(y_test2.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d0s0HZ7J82eu"
      },
      "source": [
        "**Final observations on the performance of the model on the test data.**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 769
        },
        "id": "LNevLFYCakxe",
        "outputId": "52762480-1a97-46c2-a597-a553c8f02647"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.95      0.92      1814\n",
            "           1       0.92      0.89      0.91      1828\n",
            "           2       0.94      0.91      0.92      1803\n",
            "           3       0.87      0.88      0.88      1719\n",
            "           4       0.93      0.90      0.91      1812\n",
            "           5       0.89      0.92      0.90      1768\n",
            "           6       0.91      0.87      0.89      1832\n",
            "           7       0.94      0.92      0.93      1808\n",
            "           8       0.90      0.88      0.89      1812\n",
            "           9       0.86      0.92      0.89      1804\n",
            "\n",
            "    accuracy                           0.91     18000\n",
            "   macro avg       0.91      0.91      0.91     18000\n",
            "weighted avg       0.91      0.91      0.91     18000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#importing required functions\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "#Printing the classification report\n",
        "print(classification_report(y_test2, test_pred))\n",
        "\n",
        "#Plotting the heatmap using confusion matrix\n",
        "cm2 = confusion_matrix(y_test2, test_pred)\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.heatmap(cm, annot=True,  fmt='.0f')\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TNeTz8FV9OJr"
      },
      "source": [
        "**Observations:**\n",
        "    The model is giving about 91% accuracy on the test data which is comparable to the accuracy of the validation data. This implies that the model is giving a generalized performance.\n",
        "    The recall has a very high range (88-94)% which implies that the model is good at identifying most of the objects. Model is able to identify about 94% of image 0 but can only identify only ~88% of image 3 and 8**.\n",
        "    Here also lowest image classes 0and 8 has the accuracy which means the model needs improvements in order to distinguish between 3 and 8.\n",
        "    Overall the model could distiguish individual digits well.\n",
        "    Also, considering the overall accuracy and recall values, we can say that CNN works better than ANN when identifying digits in the images.\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPE4jc2I1x9D/tLKpagiina",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}